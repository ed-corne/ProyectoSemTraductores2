export const rules = {
  1: {
    rule: "<programa> ::= <Definiciones>",
    noTerminal: "programa",
    symbolsSequence: ['Definiciones'],
    symbolsNumber: 1,
  },
  2: {
    rule: "<Definiciones> ::= \e ",
    noTerminal: "Definiciones",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  3: {
    rule: "<Definiciones> ::= <Definicion> <Definiciones> ",
    noTerminal: "Definiciones",
    symbolsSequence: ['Definicion', 'Definiciones'],
    symbolsNumber: 2,
  },
  4: {
    rule: "<Definicion> ::= <DefVar>",
    noTerminal: "Definicion",
    symbolsSequence: ['DefVar'],
    symbolsNumber: 1,
  },
  5: {
    rule: "<Definicion> ::= <DefFunc> ",
    noTerminal: "Definicion",
    symbolsSequence: ['DefFunc'],
    symbolsNumber: 1,
  },
  6: {
    rule: "<DefVar> ::= tipo identificador <ListaVar> ; ",
    noTerminal: "DefVar",
    symbolsSequence: ['tipo', 'identificador', 'ListaVar', ';'],
    symbolsNumber: 4,
  },
  7: {
    rule: "<ListaVar> ::= \e",
    noTerminal: "ListaVar",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  8: {
    rule: "<ListaVar> ::= , identificador <ListaVar>",
    noTerminal: "ListaVar",
    symbolsSequence: [',', 'identificador', 'ListaVar'],
    symbolsNumber: 0,
  },
  9: {
    rule: "<DefFunc> ::= tipo identificador ( <Parametros> ) <BloqFunc>",
    noTerminal: "DefFunc",
    symbolsSequence: ['tipo', 'identificador', '(', 'Parametros', ')', 'BloqFunc'],
    symbolsNumber: 6,
  },
  10: {
    rule: "<Parametros> ::= \e",
    noTerminal: "Parametros",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  11: {
    rule: "<Parametros> ::= tipo identificador <ListaParam> ",
    noTerminal: "Parametros",
    symbolsSequence: ['tipo', 'identificador', 'ListaParam'],
    symbolsNumber: 3,
  },
  12: {
    rule: "<ListaParam> ::= \e ",
    noTerminal: "ListaParam",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  13: {
    rule: "<ListaParam> ::= , tipo identificador <ListaParam>",
    noTerminal: "ListaParam",
    symbolsSequence: ['tipo', 'identificador', 'ListaParam'],
    symbolsNumber: 3,
  },
  14: {
    rule: "<BloqFunc> ::= { <DefLocales> }",
    noTerminal: "BloqFunc",
    symbolsSequence: ['{', 'DefLocales', '}'],
    symbolsNumber: 3,
  },
  15: {
    rule: "<DefLocales> ::= \e ",
    noTerminal: ['DefLocales'],
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  16: {
    rule: "<DefLocales> ::= <DefLocal> <DefLocales> ",
    noTerminal: "DefLocales",
    symbolsSequence: ['DefLocal', 'DefLocales'],
    symbolsNumber: 2,
  },
  17: {
    rule: "<DefLocal> ::= <DefVar> ",
    noTerminal: "DefLocal",
    symbolsSequence: ['DefVar'],
    symbolsNumber: 1,
  },
  18: {
    rule: "<DefLocal> ::= <Sentencia>",
    noTerminal: "DefLocal",
    symbolsSequence: ['Sentencia'],
    symbolsNumber: 1,
  },
  19: {
    rule: "<Sentencias> ::= \e",
    noTerminal: "Sentencias",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  20: {
    rule: "<Sentencias> ::= <Sentencia> <Sentencias>",
    noTerminal: "Sentencias",
    symbolsSequence: ['Sentencia', 'Sentencias'],
    symbolsNumber: 2,
  },
  21: {
    rule: "<Sentencia> ::= identificador = <Expresion> ; ",
    noTerminal: "Sentencia",
    symbolsSequence: ['identificador', '=', 'Expresion', ';'],
    symbolsNumber: 4,
  },
  22: {
    rule: "<Sentencia> ::= if ( <Expresion> ) <SentenciaBloque> <Otro>",
    noTerminal: "Sentencia",
    symbolsSequence: ['if', '(', 'Expresion', ')', 'SentenciaBloque', 'Otro'],
    symbolsNumber: 6,
  },
  23: {
    rule: "<Sentencia> ::= while ( <Expresion> ) <Bloque>",
    noTerminal: "Sentencia",
    symbolsSequence: ['while', '(', 'Expresion', ')', 'Bloque'],
    symbolsNumber: 5,
  },
  24: {
    rule: "<Sentencia> ::= return <ValorRegresa> ;",
    noTerminal: "Sentencia",
    symbolsSequence: ['return', 'ValorRegresa', ';'],
    symbolsNumber: 3,
  },
  25: {
    rule: "<Sentencia> ::= <LlamadaFunc> ;",
    noTerminal: "Sentencia",
    symbolsSequence: ['LlamadaFunc', ';'],
    symbolsNumber: 2,
  },
  26: {
    rule: "<Otro> ::= \e ",
    noTerminal: "Otro",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  27: {
    rule: "<Otro> ::= else <SentenciaBloque>",
    noTerminal: "Otro",
    symbolsSequence: ['else', 'SentenciaBloque'],
    symbolsNumber: 2,
  },
  28: {
    rule: "<Bloque> ::= { <Sentencias> }",
    noTerminal: "Bloque",
    symbolsSequence: ['{', 'Sentencias', '}'],
    symbolsNumber: 3,
  },
  29: {
    rule: "<ValorRegresa> ::= \e",
    noTerminal: "ValorRegresa",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  30: {
    rule: "<ValorRegresa> ::= <Expresion>",
    noTerminal: "ValorRegresa",
    symbolsSequence: ['Expresion'],
    symbolsNumber: 1,
  },
  31: {
    rule: "<Argumentos> ::= \e",
    noTerminal: "Argumentos",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  32: {
    rule: "<Argumentos> ::= <Expresion> <ListaArgumentos>",
    noTerminal: "Argumentos",
    symbolsSequence: ['Expresion', 'ListaArgumentos'],
    symbolsNumber: 2,
  },
  33: {
    rule: "<ListaArgumentos> ::= e",
    noTerminal: "ListaArgumentos",
    symbolsSequence: [],
    symbolsNumber: 0,
  },
  34: {
    rule: "<ListaArgumentos> ::= , <Expresion> <ListaArgumentos> ",
    noTerminal: "ListaArgumentos",
    symbolsSequence: [',', 'Expresion', 'ListaArgumentos'],
    symbolsNumber: 3,
  },
  35: {
    rule: "<Termino> ::= <LlamadaFunc>",
    noTerminal: "Termino",
    symbolsSequence: ['LlamadaFunc'],
    symbolsNumber: 1,
  },
  36: {
    rule: "<Termino> ::= identificador ",
    noTerminal: "Termino",
    symbolsSequence: ['identificador'],
    symbolsNumber: 1,
  },
  37: {
    rule: "<Termino> ::= entero",
    noTerminal: "Termino",
    symbolsSequence: ['entero'],
    symbolsNumber: 1,
  },
  38: {
    rule: "<Termino> ::= real",
    noTerminal: "Termino",
    symbolsSequence: ['real'],
    symbolsNumber: 1,
  },
  39: {
    rule: "<Termino> ::= cadena",
    noTerminal: "Termino",
    symbolsSequence: ['cadena'],
    symbolsNumber: 1,
  },
  40: {
    rule: "<LlamadaFunc> ::= identificador ( <Argumentos> ) ",
    noTerminal: "LlamadaFunc",
    symbolsSequence: ['identificador', '(', 'Argumentos', ')'],
    symbolsNumber: 4,
  },
  41: {
    rule: "<SentenciaBloque> ::= <Sentencia>",
    noTerminal: "SentenciaBloque",
    symbolsSequence: ['Sentencia'],
    symbolsNumber: 1,
  },
  42: {
    rule: "<SentenciaBloque> ::= <Bloque>",
    noTerminal: "SentenciaBloque",
    symbolsSequence: ['Bloque'],
    symbolsNumber: 1,
  },
  43: {
    rule: "<Expresion> ::= ( <Expresion> )",
    noTerminal: "Expresion",
    symbolsSequence: ['(', 'Expresion', ')'],
    symbolsNumber: 3,
  },
  44: {
    rule: "<Expresion> ::= opSuma <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['opSuma', 'Expresion'],
    symbolsNumber: 2,
  },
  45: {
    rule: "<Expresion> ::= opNot <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['opNot', 'Expresion'],
    symbolsNumber: 2,
  },
  46: {
    rule: "<Expresion> ::= <Expresion> opMul <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['Expresion', 'opMul', 'Expresion'],
    symbolsNumber: 3,
  },
  47: {
    rule: "<Expresion> ::= <Expresion> opSuma <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['Expresion', 'opSuma', 'Expresion'],
    symbolsNumber: 3,
  },
  48: {
    rule: "<Expresion> ::= <Expresion> opRelac <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['Expresion', 'opRelac', 'Expresion'],
    symbolsNumber: 3,
  },
  49: {
    rule: "<Expresion> ::= <Expresion> opIgualdad <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['Expresion', 'opIgualdad', 'Expresion'],
    symbolsNumber: 3,
  },
  50: {
    rule: "<Expresion> ::= <Expresion> opAnd <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['Expresion', 'opAnd', 'Expresion'],
    symbolsNumber: 3,
  },
  51: {
    rule: "<Expresion> ::= <Expresion> opOr <Expresion>",
    noTerminal: "Expresion",
    symbolsSequence: ['Expresion', 'opOr', 'Expresion'],
    symbolsNumber: 3,
  },
  52: {
    rule: "<Expresion> ::= <Termino>",
    noTerminal: "Expresion",
    symbolsSequence: ['Termino'],
    symbolsNumber: 1,
  },
};
